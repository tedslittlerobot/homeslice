#! /usr/bin/env zsh

# @todo - use key-value DSL for env files
# @todo - colourise!

################# HELP MESSAGE #################################################

function _frb_action_help_message {
    echo
    echo '================================================================================';
    echo '=============== frb tool =======================================================';
    echo '================================================================================';
    echo
    echo 'Usage: frb [action] [environment]'
    echo
    echo 'The [environment] should be an environment set up in your project'
    echo
    echo 'The [action] should be one of:'
    echo ' - deploy       : Deploys to stage'
    echo ' - touch-deploy : Deploys without uploading any assets'
    echo ' - push-assets  : Push assets'
    echo ' - build-push   : Build and push assets'
    echo ' - setup        : Set up FRB with your local git'
    echo ' - first-deploy : Run the first deploy'
    echo ' - ssh          : SSH into the server'
    echo ' - reset        : Reset the FRB instance'
    echo ' - environment  : Create an environment file'
    echo
    echo '--------------------------------------------------------------------------------';
    echo
    echo 'There should be an environment config file in ./deploy - for example,'
    echo '`./deploy/staging` or `./deploy/production'.
    echo
    echo 'It should contain the following data on these lines only:'
    echo '1. Fortrabbit App Name'
    echo '2. Fortrabbit Repo Address'
    echo '3. Branch to deploy'
    echo '4. The build command'
    echo '5. The relative asset build directory'
}

################# ACTION: INIT #################################################

function _frb_action_setup {
    FRB_ENV=$1
    FRB_REPO=`_frb_get_repo $FRB_ENV`
    git remote add `_frb_remote_name $FRB_ENV` $FRB_REPO
    git fetch --all
}

################# ACTION: SSH ##################################################

function _frb_action_ssh {
    FRB_ENV=$1
    SERVER=`_frb_get_ssh $FRB_ENV`
    ssh $SERVER
}

################# ACTION: RESET ################################################

function _frb_action_reset {
    FRB_ENV=$1
    SERVER=`_frb_get_ssh $FRB_ENV`
    ssh $SERVER reset
}

################# ACTION: FIRST DEPLOY #########################################

function _frb_action_first_deploy {
    FRB_ENV=$1
    DEPLOY_BRANCH=`_frb_get_branch $FRB_ENV`
    FRB_SERVER=`_frb_get_ssh $FRB_ENV`
    FRB_APP_NAME=`_frb_get_app_name $FRB_ENV`

    git fetch --all
    git checkout $DEPLOY_BRANCH

    git push -u `_frb_remote_name $FRB_ENV` $DEPLOY_BRANCH\:refs/heads/master
}

################# ACTION: DEPLOY TOUCH #########################################

function _frb_action_deploy_touch {
    FRB_ENV=$1
    DEPLOY_BRANCH=`_frb_get_branch $FRB_ENV`
    FRB_SERVER=`_frb_get_ssh $FRB_ENV`

    git fetch --all
    git checkout $DEPLOY_BRANCH

    git push `_frb_remote_name $FRB_ENV` ${DEPLOY_BRANCH}:master
}

################# ACTION: DEPLOY ###############################################

function _frb_action_deploy {
    FRB_ENV=$1
    DEPLOY_BRANCH=`_frb_get_branch $FRB_ENV`
    FRB_SERVER=`_frb_get_ssh $FRB_ENV`

    git fetch --all
    git checkout $DEPLOY_BRANCH

    _frb_action_build_and_push $FRB_ENV

    git push `_frb_remote_name $FRB_ENV` ${DEPLOY_BRANCH}:master
}

################# ACTION: BUILD AND PUSH ASSETS ################################

function _frb_action_build_and_push {
    FRB_ENV=$1

    _frb_run_build $FRB_ENV
    _frb_action_push_assets $FRB_ENV
}

################# ACTION: PUSH ASSETS ##########################################

function _frb_action_push_assets {
    FRB_ENV=$1
    FRB_APP_NAME=`_frb_get_app_name $FRB_ENV`
    FRB_SERVER=`_frb_get_ssh $FRB_ENV`
    FRB_UPLOAD_DIR=`_frb_get_build_dir $FRB_ENV`
    FRB_SERVER_UPLOAD_PATH="/srv/app/$FRB_APP_NAME/htdocs/$FRB_UPLOAD_DIR"
    FRB_SERVER_UPLOAD_DIR=`dirname $FRB_SERVER_UPLOAD_PATH`

    ssh $FRB_SERVER mkdir -p $FRB_SERVER_UPLOAD_DIR
    scp -r $FRB_UPLOAD_DIR "$FRB_SERVER:$FRB_SERVER_UPLOAD_DIR"
}

################# ACTION: CREATE ENV ###########################################

function _frb_action_environment {
    FRB_ENV=$1

	mkdir -p .deploy

	echo 'app-name
fortrabbit@repo:url
branch/to/deploy (including remote name - ie. upstream/master)
build command
build src directory
' > ".deploy/$FRB_ENV"
}

################# HELPERS ######################################################

function _frb_run_build {
    `_frb_get_build_command $1`
}

function _frb_get_app_name {
    echo `cat ".deploy/$1" | head -1 | tail -1`
}

function _frb_get_repo {
    echo `cat ".deploy/$1" | head -2 | tail -1`
}

function _frb_get_ssh {
    echo `cat ".deploy/$1" | head -2 | tail -1 | cut -f1 -d":"`
}

function _frb_get_branch {
    echo `cat ".deploy/$1" | head -3 | tail -1`
}

function _frb_get_build_command {
    echo `cat ".deploy/$1" | head -4 | tail -1`
}

function _frb_get_build_dir {
    echo `cat ".deploy/$1" | head -5 | tail -1`
}

function _frb_get_current_branch {
    echo `git rev-parse --abbrev-ref HEAD`
}

function _frb_remote_name {
    echo "fortrabbit-$1"
}

function _print_error {
    echo '############### ERROR ##########################################################'
    echo $1 >&2
    echo '################################################################################'
}

function _frb_require_env {
    test -z $1 && _print_error 'You must specify an environment to deploy to.' && exit 1

    test ! -f .deploy/$1 && _print_error "There is no environment file for [$1]." && exit 1
}

function _frb_require_unique_env {
    test -z $1 && _print_error 'You must specify a new environment.' && exit 1

    test -f .deploy/$1 && _print_error "The environment [$1] already exists." && exit 1
}

################# BASE COMMAND #################################################

FRB_DEPLOY_ACTION=$1
FRB_DEPLOY_ENV=$2
FRB_CURRENT_BRANCH=`_frb_get_current_branch`

# If no action is set, show the help message
test -z $FRB_DEPLOY_ACTION && _frb_action_help_message && return

if [[ "$FRB_DEPLOY_ACTION" == "help" ]]; then
    _frb_action_help_message
elif [[ "$FRB_DEPLOY_ACTION" == "deploy" ]]; then
	_frb_require_env $FRB_DEPLOY_ENV
    _frb_action_deploy $FRB_DEPLOY_ENV
elif [[ "$FRB_DEPLOY_ACTION" == "touch-deploy" ]]; then
	_frb_require_env $FRB_DEPLOY_ENV
    _frb_action_deploy_touch $FRB_DEPLOY_ENV
elif [[ "$FRB_DEPLOY_ACTION" == "push-assets" ]]; then
	_frb_require_env $FRB_DEPLOY_ENV
    _frb_action_push_assets $FRB_DEPLOY_ENV
elif [[ "$FRB_DEPLOY_ACTION" == "build-push" ]]; then
	_frb_require_env $FRB_DEPLOY_ENV
    _frb_action_build_and_push $FRB_DEPLOY_ENV
elif [[ "$FRB_DEPLOY_ACTION" == "setup" ]]; then
	_frb_require_env $FRB_DEPLOY_ENV
    _frb_action_setup $FRB_DEPLOY_ENV
elif [[ "$FRB_DEPLOY_ACTION" == "first-deploy" ]]; then
	_frb_require_env $FRB_DEPLOY_ENV
    _frb_action_first_deploy $FRB_DEPLOY_ENV
elif [[ "$FRB_DEPLOY_ACTION" == "ssh" ]]; then
	_frb_require_env $FRB_DEPLOY_ENV
    _frb_action_ssh $FRB_DEPLOY_ENV
elif [[ "$FRB_DEPLOY_ACTION" == "reset" ]]; then
	_frb_require_env $FRB_DEPLOY_ENV
    _frb_action_reset $FRB_DEPLOY_ENV
elif [[ "$FRB_DEPLOY_ACTION" == "environment" ]]; then
	_frb_require_unique_env $FRB_DEPLOY_ENV
    _frb_action_environment $FRB_DEPLOY_ENV
else
	_print_error "There is no such action [$FRB_DEPLOY_ACTION]"

	_frb_action_help_message

	exit 1
fi

git checkout $FRB_CURRENT_BRANCH > /dev/null 2>&1
